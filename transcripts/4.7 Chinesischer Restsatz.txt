 Als nächstes beschäftigen wir uns mit dem chinesischen Restsatz. Der es uns erlaubt, Systeme von Konkurrenzen zu lösen. Also stellen Sie sich vor, Sie leben im 3. Jahrhundert in China und ein Mathematiker kommt zu Ihnen und stellt Ihnen folgende Aufgabe. Er sagt, okay, wir haben x Dinge. Wenn wir die Dinge auf Körbe aufteilen, sodass jeder Korb drei Dinge fasst, sagen wir mal, wir haben Orangen, jeder Korb fasst drei Orangen, dann bleiben hinterher zwei Orangen übrig. Das bedeutet, dass die Anzahl Orangen, die wir haben, bei Division durch drei den Rest zwei lässt. Wenn wir unsere Orangen in größere Körbe verteilen, die jeweils fünf Orangen fassen, dann bleiben drei unserer Orangen noch übrig. Das bedeutet, dass die Anzahl unserer Orangen nach Division durch fünf den Rest drei lässt. Und dann zum Ende noch, Sie haben noch größere Körbe oder Stiegen oder was auch immer, und da passen jetzt sieben Orangen jeweils rein. Und wenn Sie Ihre Orangen darauf alle verteilen, dann bleiben wieder zwei übrig. Und jetzt ist die Frage, können wir daraus feststellen, wie viele Orangen wir eigentlich haben insgesamt? Also was ist unter x? Und der chinesische Restsatz sagt jetzt, dass das geht mit zwei kleinen Einschränkungen. Die erste ist, dass die Moduli, die Sie hier hinten haben, die müssen paarweise relativ prim sein, also teilerfremd, also jedes Pärchen von denen darf keinen gemeinsamen Teiler haben. Und das zweite Problem, sag ich mal in Anführungszeichen, ist, dass Sie nur eine Lösung, Modulu, dem Produkt aller Eramoduli bekommen. Also wir können rausfinden, was x ist, aber nur Modulu 3 mal 5 mal 7. So, schauen wir uns das nochmal ein bisschen langsam an. Dieser chinesische Restsatz sagt uns, dass wenn wir so ein Gleichungs- bzw. Kongruenzsystem gegeben haben, sind ja keine Gleichungen, sondern Kongruenzen, und das Kongruenzsystem sagt uns, dass die Zahl x, die wir suchen, die lässt bei Division durch m1 denselben Rest wie a1 bei Division durch m1 lässt. Sie lässt bei Division durch m2 denselben Rest wie a2 und so weiter und so fort, und sie lässt bei Division durch mn denselben Rest wie die Zahl an. Das sind die Informationen, die wir haben, und wir haben außerdem, dass die Moduli hinten positiv sind und paarweise relativ prim, also paarweise teilerfremd. Und der Satz sagt uns jetzt, dass dieses Kongruenzsystem eine eindeutig bestimmte Lösung hat, die kleiner ist als das Produkt der ganzen Moduli hier, und jeweils x plus m mal i für alle i genauso auch eine Lösung ist für dieses Kongruenzsystem hier hinten. Das heißt, es gibt unendlich viele Lösungen, aber es gibt genau eine, die echt kleiner ist als das Produkt der Moduli. Das ist auch relativ flink zu sehen, dass das so sein muss, dass alle x plus mi auch Lösungen sind, wenn x eine Lösung ist. Denn wenn sie hier plus m mal i ranhängen und sagen, okay, x plus m mal i lässt denselben Rest wie a1 Modulo m1, wir wissen aber, dass m1 Großm teilt, also sind diese Werte x und x plus Großm mal i, die sind Kongruent Modulo jedes dieser Moduli mi. Das sind jetzt andere i, jedes dieser Moduli mj. Und das heißt, ich kann nicht unterscheiden zwischen x und x plus m mal i, wenn ich nur diese Informationen Modulo der verschiedenen Moduli habe. Okay, dann schauen wir uns den Beweis an. Ich werde hier nur die Existenz beweisen. Die Eindeutigkeit können Sie sich zu Hause überlegen, aber dafür wird das konstruktiv sein. Das heißt, wir sehen, wie wir diese Lösung x hier berechnen können. Zunächst definieren wir uns so eine Menge mi, indem wir einfach das Produkt aller Moduli nehmen, das ist Großm, und da wieder mi rausnehmen, klein mi. Das heißt, in diesem Großmi sind alle Moduli drin, außer Kleinmi. Und da die A-Weise relativ prim, also teilerfremd sind, gilt, dass das ggt von Kleinmi und Großmi gleich 1 ist. Also Kleinmi und Großmi sind teilerfremd, weil Kleinmi zu allen Faktoren, die mi ausmachen, teilerfremd ist. Vom Lemma von Bisou können wir jetzt Schlussfolgern, dass sich das ggt von Kleinmi und Großmi darstellen lässt als eine Linearkombination aus Kleinmi und Großmi. Also gibt es so eine Bisou-Koeffizienten si und ti, sodass hier diese Gleichheit gilt. Das heißt aber, dass es so ein ti aus Z gibt, das ist das selbe ti wie hier, sodass ti mal Großmi, Komponent 1 ist Modulu Kleinmi. Das ist einfach, wenn wir uns hier das angucken, Modulu Kleinmi, also si mal mi plus ti mal Großmi. Wenn wir uns das Modulu mi angucken, dann fällt das hier vorne weg. Das trägt nichts zum Rest bei, weil das durch mi teilbar ist. Das heißt, das ist das selbe wie ti mal mi Modulu mi. Da diese Linearkombination hier gleich 1 ist, haben wir also das nach Division durch mi. Da bleibt nur noch das hier übrig, also ist das irgendwo n zu 1 zum Modulu mi. Dann behaupte ich, dass diese Summe hier, die entsteht, wenn ich ai jeweils ran multipliziere an dieses ti mal mi. Hier habe ich a1 ran, multipliziere dann das m1 mal t1. Hier habe ich das a2 ran, multipliziere dann m2 mal t2 und so weiter und so fort. Ich behaupte, dass diese Summe jetzt hier das System löst. Warum ist das jetzt der Fall? Dazu können wir mal ausprobieren, was passiert, wenn wir das Einsetzen in die Gleichung, also in diese Konkurrenz hier, unser x einsetzen. Diese Konkurrenz ist Modulu m1 und wir können feststellen, dass das m1 in allen diesen Groß mi vorkommt, bis auf Groß m1. Denn aus Groß m1 haben wir ja genau so gebildet, dass wir aus dem Produkt aller Moduli genau klein m1 rausgenommen haben. Und die Moduli sind alle teilerfremd, das heißt m1 ist das einzige Groß m, was nicht durch klein m1 teilbar ist. Alle anderen Groß mi sind durch klein m1 teilbar. Das heißt aber insbesondere, dass jetzt, wenn ich den Rest nach Division durch m1 bilde, dann fällt das hier nicht ins Gewicht, weil es teilbar ist durch m1 und alle anderen auch nicht. Der einzige Summand in dieser Summe, der interessant ist, der irgendwie zum Rest nach Division durch m1 beiträgt, ist dieser erste hier. Also hier unten, die mj sind alle Konkurrenten 0, Modulu mi, für alle ij, die ungleich i sind. Und für i selbst ist es so, dass wir wissen, dass mi mal ti Konkurrent 1 ist, Modulu mi. Das heißt, wenn wir da jetzt a1 ran multiplizieren, haben wir, dass x Konkurrent ist zu a1 Modulu mi. Also x ist Konkurrent zu ai mal mi mal ti, weil alle anderen Summanden wegfallen, weil die anderen Summanden teilbar sind durch klein mi. Und das wissen wir aufgrund von der Konkurrenz 2 hier, dass das Konkurrent ist zu ai Modulu mi. Und das gilt jetzt für alle i, das heißt, dieses x, was wir uns hier zusammen gebastelt haben, erfüllt alle diese Konkurrenzen, die es erfüllen soll. Und dann sagen sie vielleicht mit Recht, dass dieses x nicht unbedingt kleiner ist als m. Das heißt, unter Umständen müssten sie da nochmal den Rest nach Division durch M bilden. Aber wie ich vorhin argumentiert habe, sollten alle Reste, die Konkurrent sind, oder alle Zahlen, die Konkurrent sind, zu x sein. Modulu M sollten alle dieses System von Konkurrenzen lösen. Und wenn sie wollen, können sie sich zu Hause hinsetzen und mal zeigen, dass alle anderen Lösungen des Systems Konkurrent sind zu x Modulu M. Kleiner Hinweis vielleicht dazu, wenn sie... Also sie könnten quasi per Widerspruch annehmen, hey, ich gucke mir so eine andere Lösung an, die heißt y. Die löst das Ding auch, das heißt insbesondere y ist auch jeweils Konkurrent zu diesen ai's. Und damit ist es Konkurrent zu x. Und das heißt aber, dass x und y lassen den selben Rest nach Division durch all diesen Moduli. Also insbesondere x minus y wird geteilt von allen diesen ai's und dann kriegen sie raus, weil die ai's hier paarweise relativ prim sind, kriegen sie dann raus, dass auch M teilt diese Differenz. Also sind x und y Konkurrent Modulu M. Also wenn wir zurückkommen auf die ursprüngliche Frage, wie sieht es jetzt aus, wie viele Orangen haben wir gehabt? Und natürlich können wir es nur sagen Modulu M, 3 mal 5 mal 7 ist gleich 105. Das heißt, wir können es niemals sicher sein, aber wir können vielleicht schon unterscheiden, ob wir 10 Orangen haben oder 115 Orangen, wenn wir natürlich drauf schauen. Okay, hier habe ich Ihnen rechts nochmal alles Wichtige hingeschrieben, nämlich M ist das Produkt aller kleinen mi. Das Großmi ist das Resultat, wenn ich das Kleinmi wieder aus dem Großmi rausnehme. Dann hatten wir das für alle i, ist halt dieser Besu-Koeffizient Ti wichtig. Der ist multipliziert mit dem Mi-Konkurrent 1 Modulu mi. Und dann die Lösung, die wir uns zusammen gebastelt haben, war die Summe über alle i von Großmi, dem Besu-Koeffizient Ti und dem Wert ai aus der Konkurrenz. Also rechnen wir zunächst die Mi aus. Das Großm ist 105, also wenn wir aus 3 mal 5 mal 7 erstmal die 3 rausnehmen, bleiben noch 5 mal 7 übrig, also 35. Wenn wir aus 3 mal 5 mal 7 die 5 rausnehmen, bleiben noch 3 und 7 übrig, also 21. Und wenn wir die 7 rausnehmen, bleiben noch 3 mal 5 übrig, also 15. Jetzt können Sie den weiteren euclidischen Algorithmus anwerfen, um die Besu-Koeffizienten T1, T2, T3 zu finden. Da kriegen Sie dann sowas raus wie 2, 1 und 1. Das lässt sich dann auch klingend verifizieren, indem wir einfach gucken können, dass 1 mal T1 sollte den Rest 1 lassen bei Division durch 3. In der Tat, M1 35 mal 2 sind 70, 70 lässt bei Division durch 3 den Rest 1, weil 69 durch 3 teuer ist. Was haben wir hier als nächstes? M2 ist 21 mal 1 sollte den Rest 1 lassen bei Division durch 5, das ist auch der Fall. Und M3 mal 1 sollte auch Konkurrent 1 sein, Modulo 7. Also setzen wir ein in unsere Lösungsformel hier. Das ist die Summe über jeweils die Ai, Mi und Ti auch multipliziert. Ai ist 2, also A1 ist 2, M1 35, T1 2, das stücken wir uns jetzt so zusammen. Dann haben wir hier als zweites A2, das ist A1, das ist M1, das ist T1, das ist A2 ist 3, dann M2 ist 21 und T2 ist 1. Und als letztes haben wir noch A3, M3 und T3. Wenn Sie das jetzt alles multiplizieren und dann aufsummieren, kommen Sie auf 233. Das sollte also die Lösung sein Ihres Konkurrenzsystems hier. Aber, also das ist eine Lösung Ihres Konkurrenzsystems, denn alle Lösungen 233 plus 105 mal i sind alles Lösungen. Also insbesondere auch, achso dieses i ist in Z, insbesondere sollte auch 23 eine Lösung sein. Dann können wir mal die Probe rechnen. Also hier steht jeweils 23, ob das die Konkurrenzen erfüllt. Modulo 3, da 21 durch 3 teilbar ist, lässt es denselben Rest wie 2. Modulo 5 lässt es denselben Rest wie 3 und Modulo 7 lässt es wieder denselben Rest wie 2. Also das funktioniert. 23 ist eine Lösung und da können Sie jetzt beliebig häufig 105 drauf addieren oder subtrahieren wie Sie wollen und das sind alles Lösungen. Eine Anwendung des chinesischen Restsatzes, die jetzt nicht ist, so ordentlich zu zählen, ist die Arithmetik großer Zahlen in Computern. Und zwar können Computer inherent ja nur mit Zahlen rechnen, die von ihrer Registergröße abhängen. Also 32 bzw. jetzt 64 Bit Register, mit solchen Zahlen können die Computer halt rechnen. Aber was, wenn wir mit größeren Zahlen rumrechnen wollen? Dann können wir den chinesischen Restsatz benutzen, weil der chinesische Restsatz sagt, dass ich eine sehr große Zahl a eindeutig darstellen kann als die Reste von a Modulo irgendwelchen paarweise teilerfremden Werten mi. Zum Beispiel, wenn ich in meinem Rechner nur Zahlen speichern kann bis zu 4, dann kann ich damit auch größere Zahlen darstellen, also z.B. Zahlen zwischen 0 und 11, indem ich einfach zwei Zahlen speichere zwischen 0 und 4. Und diese Abbildung ist hier wie folgt. Meine Zahl 0 bilde ich ab als Paar 0, weil 0 den Rest 0 lässt bei Division durch 3 und 0 bei Division durch 4. Das heißt insbesondere 1 und 2 werden auch dargestellt als 1, 1 und 2, 2. Die erste Zahl, wo sich etwas ändert, ist 3, die jetzt auch den Rest 0 liefert bei Division durch 3, aber immer noch den Rest 3 bei Division durch 4. Und so weiter und so fort. Unter anderem vielleicht hier unten noch so ein Beispiel. Die Zahl 10 dargestellt in einem Rechner, der nur Zahlen bis zu 4 darstellen kann als Paar, wäre in diesem Fall quasi 10 Modulo 3, das ist 1, und 10 Modulo 4 ist 2. Also ich könnte die 10 eindeutig darstellen als Paar 1, 2. Und Sie können jetzt verifizieren, dass kein Paar doppelt vorkommt. Das ist genau was der chinesische Restsatz uns garantiert, dass die Lösung Modulo 3 mal 4, also Modulo 12 eindeutig ist. Im Allgemeinen, wenn wir jetzt nicht nur von Zahlen bis 12 ausgehen und unser Rechner kann nur Zahlen bis 4 darstellen, sondern im Allgemeinen möchten wir vielleicht mit Zahlen rumrechnen, die sehr sehr groß werden, und dann brauchen wir nicht nur zwei Speicherplätze oder Register, sondern vielleicht bis zu N viele. Und die müssen wir jetzt, diese Grenzen oder die oberen Schranken für diese Register, das sind unsere MI, und die müssen wir jetzt so wählen, dass die in unsere Registergröße reinpassen und dass das Produkt davon größer wird als das Ergebnis der Zahl, die wir aus der arithmetischen Operation erwarten. Jetzt erlaubt uns wie gesagt der chinesische Restsatz, große Zahlen, also Zahlen die nach oben durch M beschränkt sind, zu repräsentieren als N-Tupel von Zahlen, die durch die kleinen m jeweils beschränkt sind. Und mit dieser großen Zahl können wir jetzt eine Arithmetik durchführen, die repräsentiert wird durch Arithmetik auf den Restklassen Modulo diesen kleinen mi. Zum Beispiel wenn sie jetzt zwei so große Zahlen haben, eine ist Summe i a i, die i mi, das ist ihre Zahl x, und jetzt haben sie ja noch eine Zahl y meinetwegen, die ist Summe i b i, die i mi, diese mi's und ti's die hängen nicht von den a i's, beziehungsweise in diesem Fall von den b i's ab, die hängen nur von den Moduli mi ab. Das heißt zwei so eine Zahlen in dieser Darstellung, da ändern sich nur die Koeffizienten ganz vorne. Und insbesondere wenn sie jetzt addieren wollen, dann kommt irgendwie so ein z raus, das ist Summe i a i plus b i mal ti mal mi. Das heißt, wenn sie hier diese Komponenten haben a 0 a 1 und so weiter, oder haben wir bei 1 angefangen? Ja ich glaube wir haben bei 1 angefangen, sei es drum. Also a 1 a 2 und so weiter. Das ist jetzt die Darstellung von x und dann haben sie b 1 b 2 und so weiter, das ist die Darstellung von y. Dann lässt sich die Summe darstellen als a 1 plus b 1 a 2 plus b 2 und so weiter und so fort. Das heißt sie können Arithmetik auf diesen großen Zahlen betreiben, indem sie Arithmetik auf kleinen Zahlen betreiben. Und insbesondere lässt sich hier diese Arithmetik parallelisieren. Wohingegen sich die Arithmetik auf großen Zahlen nicht parallelisieren lässt, weil sie halt jeweils nicht einfach die große Zahl in Stückchen schneiden und irgendwie innerhalb dieser Stückchen parallel arbeiten, weil es ja hier einen Übertrag geben könnte. Aber mit Hilfe dieser Moduli hier können sie parallel arbeiten. Achso und natürlich müssen sie da immer die Reste bilden. Mod m1, mod m2 und so weiter und so fort. Sonst könnten sie ja hier die Bereiche verlassen. Aber wichtig ist halt nur die Konkurrenz Modulu m1, dass die erhalten bleibt. Deswegen können sie einfach nach der Summation hier nochmal den Rest Modulu m1 berechnen und das ist dann ihre neue Konkurrenz. Und wenn sie wollen können sie dann am Ende diese Darstellung von n vielen Komponenten, können sie wieder zurückrechnen in eine Zahl, indem sie das System von Konkurrenzen lösen. Das heißt wir haben gesehen, wir können mit dieser Darstellung jetzt größere Zahlen bearbeiten als wir eigentlich vom Rechner darstellen können. Und wir können unsere Berechnungen auch parallel durchführen, indem wir auf den Resten rechnen stattdessen. Zum Schluss vielleicht nochmal mit konkreten Zahlen. Sagen wir mal wir haben einen Prozessor, der kann Arithmetik auf Zahlen betreiben, die kleiner 100 sind. Dann müssten wir uns als erstes ein paar Moduli suchen, die paarweise teilerfremd sind. Zum Beispiel diese hier. Wir könnten also von oben nach unten mal losgehen. Sagen wir 99, das ist 9x11. Dann haben wir hier 98, das ist 2x49, müsste 7x7 sein. 97 ist prim, würde ich mich mal aus dem Fenster lehnen wollen. Und hier haben wir 5x19, das ist prim. Was wichtig ist allerdings, ist jetzt, dass die paarweise teilerfremd sind. Also keine gemeinsamen Teilerpaarweise. Okay, so und das heißt wir können jetzt mit diesen 4 Moduli natürliche Zahlen darstellen bis zu Osm. Das ist das Produkt dieser Moduli. Das Produkt dieser Moduli ist etwa 84 Millionen. Das heißt wir können jetzt mit Zahlen bis zu 84 Millionen herumrechnen, obwohl unser Prozessor nur mit Zahlen bis 100 umgehen kann. Und das machen wir, indem wir die Zahl durch ihre Reste repräsentieren. Modulu unseren 4 Mi hier. Zum Beispiel haben wir hier zwei große Zahlen. Also groß genug, dass wir sie nicht einfach so darstellen können, dass wir sie in ihre Reste umrechnen müssten. Das haben wir mal hier gemacht. Diese 123.684 lassen die Reste 33, 8, 9 und 89 bei Division durch unsere Mi. Dasselbe haben wir hier nochmal mit der Zahl 413.456 gemacht. Das sind diese Reste halt, wo wir jetzt nicht nochmal das Modul geschrieben haben. Aber es ist ja klar was das bedeutet. Und um diese großen Zahlen zu addieren, können wir jetzt einfach die Reste addieren In der ersten Addition haben wir noch nichts mit Moduli. Dann haben wir die 33 plus die 32. Kommt auf 65. Dann haben wir hier noch die 32. Die haben wir jetzt mit Modul und die 32. Und dann haben wir hier noch die 32. Und dann haben wir hier noch die 32. Kommt auf 65. Dann haben wir als nächstes 8 im zweiten Wert plus 92. Das sind 100. Der zweite Wert ist Modul 98. 100 Modul 98 ist 2. Sehen wir also als Zweiter. Dann haben wir als nächstes 9 und 42. Das müssen 51 sein. Modul 97 bleiben 51. Und dann haben wir noch 89 plus 16. Das sind dann wohl 105. Modul 95, wo wir im letzten Teil des Tuples sind, bleiben noch 10 übrig. Wir stellen also die Summe dar als dieses 4-Tupel. Wenn wir jetzt das zurückrechnen wollen, wissen wollen, wie groß ist die Zahl im Dezimalsystem, dann müssen wir das Kongruent-System hier unten lösen. xKongruent 65 Modulur dem ersten Modulus, 99. Kongruent y von Modulur dem zweiten hier, 98. Kongruent 51 Modulur dem dritten und Kongruent 10 Modulur dem vierten. Dann müssen wir jetzt wieder unseren erweiterten Euclidischen Algorithmus anwerfen, um die Besu-Koeffizienten zu bestimmen. Wie wir es vorhin gesehen haben. Dann kommt heraus, dass x gleich 537.140 ist. Das ist hoffentlich hier die Summe. Wir haben also eine Addition durchgeführt von zwei Zahlen, die wir in unserem Computer gar nicht darstellen konnten. Und wir haben sie auch noch parallel durchgeführt. Jede Stelle hier konnten wir unabhängig von den anderen Stellen ausrechnen. Ein Hinweis vielleicht noch zum Schluss, wie man eine vernünftige solche Moduli wählen kann. Und zwar ist da die Form 2 hoch i minus 1 günstig. Wenn i eine Primzahl ist, dann hat das gute Chancen, selbst eine Primzahl zu sein. Sie erinnern sich an die Mersenne Primzahlen. Und wenn i nicht eine Primzahl ist, dann ist das zwar garantiert zusammengesetzt, aber die Faktoren, durch die das zusammengesetzt ist, unterscheiden sich von anderen 2 hoch i minus 1. Außerdem können sie mit solchen Moduli relativ gut binäre Arithmetik betreiben. Da gibt es ein paar Tricks, die sie anwenden können. Ja, genau. Das wollte ich noch dazu sagen zum Ende. Und damit enden wir, glaube ich, diese Teilsektion des Kapitels.